{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","token","deviceId","loggedIn","error","trackName","artistName","albumName","playing","position","duration","playerCheckInterval","_this2","_this$state","react_default","a","createElement","className","href","class","onClick","onPrevClick","onPlayClick","onNextClick","type","value","onChange","e","setState","target","handleLogin","_this3","setInterval","checkPlayer","window","Spotify","clearInterval","player","Player","name","getOAuthToken","cb","createEventHandlers","connect","_this4","on","console","onStateChanged","data","device_id","log","_state$track_window","track_window","currentTrack","current_track","album","artists","map","artist","join","paused","previousTrack","togglePlay","nextTrack","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88f41f45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nclass App extends Component {\n    \n    constructor(props){\n        super(props);\n        this.state={\n            token:\"\",\n            deviceId:\"\",\n            loggedIn:false,\n            error:\"\",\n            trackName:\"Song Name\",\n            artistName:\"Artist Name\",\n            albumName:\"Album Name\",\n            playing:false,\n            position:0,\n            duration:0,\n        };\n        this.playerCheckInterval=null;\n    }\n    \n  render() {\n      const { \n          token,\n          loggedIn,\n          artistName,\n          trackName,\n          albumName,\n          error,\n          position,\n          duration,\n          playing,\n      } = this.state;\n      \n      return (\n          <div className=\"App\">\n             <div className=\"App-header\">\n                <h2>Spotify Web Player</h2>\n                <div className=\"buttongroup\">\n                    <button><a href=\"https://keeganosler.com\"><i class=\"fa fa-user\"></i></a></button>\n                    <button><a href=\"\"><i class=\"fa fa-github\"></i></a></button>\n                    <button><a href=\"\"><i class=\"fa fa-linkedin\"></i></a></button>\n                </div>\n             </div>\n             {error && <p>Error: {error}</p>}\n             {loggedIn ?\n              (<div>\n                <h5>Currently Playing:</h5><h4>{trackName}</h4>\n                <h5>By:</h5><h4>{artistName}</h4>\n                <h5>From the Album:</h5><h4>{albumName}</h4>\n                <p>\n                    <button onClick={() => this.onPrevClick()}><i class=\"fa fa-backward\"></i></button>\n                    <button onClick={() => this.onPlayClick()}>{playing ? <i class=\"fa fa-pause\"></i> : <i class=\"fa fa-play-circle\"></i>}</button>\n                    <button onClick={() => this.onNextClick()}><i class=\"fa fa-forward\"></i></button>\n                </p>\n              </div>)\n              :\n              (<div>\n                <h3 className=\"App-intro\">\n                    Enter your Spotify access token. Get it from{\" \"}<a href=\"https://beta.developer.spotify.com/documentation/web-playback-sdk/quick-start/#authenticating-with-spotify\">here</a>.\n                </h3><h3>You will need a Spotify account to proceed.</h3>\n`               <h3>\n                    <input type=\"text\" value={token} onChange={e => this.setState({ token: e.target.value })} />\n                </h3>\n                <p>\n                    <button onClick={()=>this.handleLogin()}>Go!</button>\n                </p>\n             </div>)\n              }\n          </div> \n      );\n\n  }\n\n      handleLogin() {\n            if(this.state.token !== \"\"){\n                this.setState({ loggedIn: true });\n                this.playerCheckInterval=setInterval(() => this.checkPlayer(), 1000);\n            }\n      }\n\n    checkPlayer(){\n        const{ token } = this.state;\n\n        if(window.Spotify !== null){\n            clearInterval(this.playerCheckInterval);\n            this.player=new window.Spotify.Player({\n                name: \"Keegan's Spotify Player\",\n                getOAuthToken: cb => {cb(token); },\n            });\n            this.createEventHandlers();\n            this.player.connect();\n        }\n    }\n\ncreateEventHandlers() {\n  this.player.on('initialization_error', e => { console.error(e); });\n  this.player.on('authentication_error', e => {\n    console.error(e);\n    this.setState({ loggedIn: false });\n  });\n  this.player.on('account_error', e => { console.error(e); });\n  this.player.on('playback_error', e => { console.error(e); });\n\n  this.player.on('player_state_changed', state => this.onStateChanged(state));\n  this.player.on('ready', data => {\n    let { device_id } = data;\n    console.log(\"Let the music play on!\");\n    this.setState({ deviceId: device_id });\n  });\n}\n\nonStateChanged(state) {\n  if (state !== null) {\n    const {\n      current_track: currentTrack,\n      position,\n      duration,\n    } = state.track_window;\n    const trackName = currentTrack.name;\n    const albumName = currentTrack.album.name;\n    const artistName = currentTrack.artists\n      .map(artist => artist.name)\n      .join(\", \");\n    const playing = !state.paused;\n    this.setState({\n      position,\n      duration,\n      trackName,\n      albumName,\n      artistName,\n      playing\n    });\n  }\n}\n\nonPrevClick(){\n    this.player.previousTrack();\n}\n\nonPlayClick(){\n    this.player.togglePlay();\n}\n\nonNextClick(){\n    this.player.nextTrack();\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}